
use core::str::FromStr;
use crate::ast;
use lalrpop_util::ParseError;

grammar(state: &mut ast::State);

pub Prog: ast::Prog = {
    <p:ProgHeader> <v:VarPart> <s:StatPart> => ast::Prog::new(p, s)
}

// ----------------------------------------------------------------------------

ProgHeader: String = { "program" <n:Identifier> "(" "input" "," "output" ")" ";" => n }

Identifier: String = { <id:r"[a-zA-Z][a-zA-Z0-9]*"> => id.to_owned() }

// ----------------------------------------------------------------------------

VarPart = { "var" VarDecList }

VarDecList = { VarDec, VarDecList VarDec }

VarDec: () = {
    <v:IdList> ":" <t:Type> ";" =>? {
        for v in v {
            state.push_variable(v, t).ok_or_else(|| ParseError::User {error: "Duplicate variable definitions"})?;
        }
        Ok(())
    },
}

IdList: Vec<String> = {
    Identifier => vec![<>],
    <mut v:IdList> "," <id:Identifier> => {v.push(id); v},
}

Type: ast::Type = {
    "integer" => ast::Type::Integer,
    "real" => ast::Type::Real,
    "boolean" => ast::Type::Boolean,
}

// ----------------------------------------------------------------------------

StatPart: ast::StatList = { "begin" <s:StatList> "end" "." => s, }

StatList: ast::StatList = {
    Stat => ast::StatList(vec![<>]),
    <mut s:StatList> ";" <st:Stat> => {s.0.push(st); s},
}

StatBlock: ast::StatList = {
    "begin" <s:StatList> "end" => s,
    Stat => ast::StatList(vec![<>]),
}

Stat: ast::Stat = {
    AssignStat => <>,
    "while" <c:Expr> "do" <s:StatBlock> => ast::Stat::While(c.cast_bool(), s),
    "if" <c:Expr> "then" <s:StatBlock> => ast::Stat::If(c.cast_bool(), s),
    "write" <e:Expr> => ast::Stat::Print(e),
    "writeLn" <e:Expr> => ast::Stat::PrintLn(e),
}

AssignStat: ast::Stat = { 
    <a: Assignable> ":=" <e:Expr> =>? ast::Stat::assign(a, e).map_err(|_| ParseError::User {error: "Invalid assign types" })

    //(a.get_type(state) == e.get_type()).then_some(ast::Stat::Assign(a, e)) 
}

Assignable: ast::Assignable = {
    <v: Variable> => ast::Assignable::variable(v, state),
    <t: Type> "[" <e: Expr> "]" => ast::Assignable::memory(t, e),
}

Variable: ast::VariableReference = { 
    <i:Identifier> =>? state.get_variable(&i).ok_or_else(|| {ParseError::User {error: "Undefined variable"}}) 
}

// ----------------------------------------------------------------------------

Expr: ast::Expr = {
    <o:Operand> => o,
    "(" <e:Expr> ")" => e,
    <a:Expr> <o:Opcode> <b:Operand> =>? ast::Expr::binary(a, b, o).map_err(|_| ParseError::User {error: "invalid operation"}),
    <a:Expr> <o:Opcode> "(" <b:Expr> ")" =>? ast::Expr::binary(a, b, o).map_err(|_| ParseError::User {error: "invalid operation"}),
}

Opcode: ast::BinaryOpcode= {
    "*" => ast::BinaryOpcode::Mul, 
    "/" => ast::BinaryOpcode::Div,
    "%" => ast::BinaryOpcode::Mod,
    "+" => ast::BinaryOpcode::Add, 
    "-" => ast::BinaryOpcode::Sub,
    "==" => ast::BinaryOpcode::Equal,
    "!=" => ast::BinaryOpcode::NotEqual,
    ">" => ast::BinaryOpcode::GreaterThan,
    ">=" => ast::BinaryOpcode::GreaterEqual,
    "<" => ast::BinaryOpcode::LessThan,
    "<=" => ast::BinaryOpcode::LessThanEqual,
    "&&" => ast::BinaryOpcode::And,
    "||" => ast::BinaryOpcode::Or,
    "^^" => ast::BinaryOpcode::Xor,
    "&" => ast::BinaryOpcode::BitAnd,
    "|" => ast::BinaryOpcode::BitOr,
    "^" => ast::BinaryOpcode::BitXor,
}


Operand: ast::Expr = {
    <v:Variable> => ast::Expr::variable(v, state),
    <v:Value> => ast::Expr::value(v),
    <t:Type> "(" <e:Expr> ")" => e.cast_type(t),
    <t:Type> "[" <e:Expr> "]" => ast::Expr::mem(t, e),
}

Value: ast::Value =  {
    r"[0-9]+" =>? i32::from_str(<>).map(ast::Value::Integer).map_err(|_| ParseError::User {error: "Cannot parse int"}),
    r"[0-9]*\.[0-9]+" =>? f64::from_str(<>).map(ast::Value::Real).map_err(|_| ParseError::User {error: "Cannot parse real"}),
    "true" => ast::Value::Boolean(true),
    "false" => ast::Value::Boolean(false),
}

